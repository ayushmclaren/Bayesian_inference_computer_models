
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> set.seed(1)
> library(mvtnorm)
> library(mcmc)
> library(invgamma)
> 
> make_tilde <- function(X,t) {
+     X_vec = c(1, X[1], X[2], X[3], X[1] ^ 2, X[2] ^ 2, X[3] ^ 2, X[1] * X[2], X[2] * X[3], X[3] * X[1], t, t ^ 2)
+     return(X_vec)
+ }
> # drifet function for Lorenz-63
> drift_fun <- function(X, t, B) {
+     #print(make_tilde(X,t))
+     tildeX = matrix(make_tilde(X, t), nrow = 12, ncol = 1)
+     B_mat = matrix(B, nrow = 3)
+     #print(B)
+     #print(dim(tildeX))
+     ans = B_mat %*% tildeX
+     return(ans)
+ }
> 
> drift_fun_true <- function(X, theta) {
+     ans = c(theta[1] * (X[2] - X[1]), theta[2] * X[1] - X[2] - X[1] * X[3], X[1] * X[2] - theta[3] * X[3])
+     return(t(t(ans)))
+ }
> 
> ludfun <- function(state) {
+     # State is the vector storing the vectors of length 3*N + 12. The first 3*(N+1) terms are Xs. The next three terms are the parameters \sigma, \rho & 
+     # \beta. The remaining 6 terms are the \Sigma matrix. Definition of Sigma below shows how the symmetric matrix is constructed.
+ 
+     X_n = matrix(state[1:n.X], nrow = 3, ncol = N + 1)
+     B_vec = state[(n.X + 1):(n.X + n.theta)] # vector of \sigma, \rho and \beta    
+     B_mat = matrix(B_vec, nrow = 3)
+ 
+     # all the elements of theta should be positive
+     #if (min(theta) <= 0)
+         #return(-Inf)
+ 
+     # Extracting observed data
+     X_t = X_n[, seq(2, N + 1, N / K)]
+ 
+ 
+     # pi is the log of likelihood
+     # This doesn't need a loop
+     p1 = 0
+     #print(dim(Y))
+     for (k in 1:K) {
+         Y.t = t(t(Y[, k]))
+         X_t.t = t(t(X_t[, k]))
+         p1 = p1 + t(Y.t - X_t.t) %*% inv_R %*% (Y.t - X_t.t)
+     }
+     p1 = -0.5 * p1
+     p1 = p1 - 0.5 * t(t(t(X_n[, 1])) - tau_o) %*% inv.lam_o %*% (t(t(X_n[, 1])) - tau_o)
+ 
+     #######################################################################
+     #p1 = (sum(dmvnorm(t(Y - X_t), sigma = R, log = TRUE))
+     #- 0.5 * t(t(t(X_n[, 1])) - tau_o) %*% inv.lam_o %*% (t(t(X_n[, 1])) - tau_o))
+     ######################################################################
+ 
+     p2 = (-1/2)*sum((B_vec-mu)^2) / sigma2
+ 
+     f = mapply(drift_fun, X = split(X_n, rep(1:ncol(X_n), each = nrow(X_n))), t = del_t * (0:N), MoreArgs = list(B_vec))
+     #f = sapply(split(X_n, rep(1:ncol(X_n), each = nrow(X_n))), drift_fun, B_vec, list(1,2))
+     del_X = t(diff(t(X_n)))
+     beta_tmp = rowSums((del_X / del_t - f[, - (N + 1)]) ^ 2) * del_t / 2
+     p3 = 3 * lgamma(a4 + N / 2) - (a4 + N / 2) * sum(log(b4 + beta_tmp))
+ 
+     return(p1 + p2 + p3)
+ 
+ }
> 
> linchpin <- function(n, init) {
+     X_avg = numeric(length = n.X)
+     param_mat = matrix(, nrow = n, ncol = n.theta + n.sigma)
+     scale = rep(0.0005, n.X + n.theta)
+     #scale[(n.X + 1):(n.X + n.theta)] = 0.005
+     scale[n.X + non_zero] = 0.01
+     scale[n.X + c(24,29)] = 0.002
+     #scale[n.X + c(24)] = 0.005
+     scale[n.X + 8] = 0.008
+     scale[n.X + c(5)] = 0.08  # 0.05
+     scale[n.X + c(4, 7)] = 0.08
+     #scale[n.X+c(3)] = 0.0008
+     # scale[n.X+4] = 0.5
+     scale[n.X+12] = 0.01
+     accept.prob = 0
+     #chain = metrop(ludfun, init, n, scale = scale)
+     #print(chain$accept)
+     for (i in 1:n) {
+         if(i %% 1e3 == 0) print(c(i, accept.prob/i))
+         chain = metrop(ludfun, init, 1, scale = scale)
+         state = chain$batch
+         accept.prob = accept.prob + chain$accept
+         X_n = matrix(state[1:n.X], nrow = 3, ncol = N + 1)
+         theta = state[(n.X + 1):(n.X + n.theta)] # vector of \sigma, \rho and \beta 
+         X_avg = X_avg + state[1:n.X]
+         param_mat[i, 1:n.theta] = theta
+ 
+         Sigma = numeric(length = 3)
+         f = mapply(drift_fun, X = split(X_n, rep(1:ncol(X_n), each = nrow(X_n))), t = del_t * (0:N), MoreArgs = list(theta))
+         del_X = t(diff(t(X_n)))
+         beta_tmp = rowSums((del_X / del_t - f[, - (N + 1)]) ^ 2) * del_t / 2
+         Sigma[1] = rinvgamma(1, shape = N / 2 + a4, rate = b4 + beta_tmp[1])
+         Sigma[2] = rinvgamma(1, shape = N / 2 + a4, rate = b4 + beta_tmp[2])
+         Sigma[3] = rinvgamma(1, shape = N / 2 + a4, rate = b4 + beta_tmp[3])
+ 
+         param_mat[i, (n.theta+1):(n.theta + n.sigma)] = Sigma
+         init = state
+     }
+     print(accept.prob/n)
+     X_avg = X_avg / n
+     final_output = list(param_mat, X_avg)
+     return(final_output)
+ }
> 
> 
> # Numerical method to sample from SDE
> euler_maruyama <- function(X0, del_t, N, theta, Sigma) {
+     X = matrix(, nrow = 3, ncol = N + 1)
+     X[, 1] = X0
+     for (i in 2:(N + 1))
+         X[, i] = X[, i - 1] + t(drift_fun_true(X[, i - 1], theta)) * del_t + rmvnorm(1, sigma = del_t * Sigma)
+     return(X)
+ }
> # X = euler_maruyama(c(1,1,1), 0.1, 20, c(1,2,3), diag(2,3))
> 
> 
> # hyper-parameters
> to = 0 # initial time
> tf = 20 # final time
> Nobs = 10 # no of observations (Y) per time step
> del_t = 0.01 # discrete approximation of dt
> tau_o = matrix(rep(0, 3), nrow = 3, ncol = 1) # prior mean for X[0], i.e. initial state of Lorenz-63 oricess
> lam_o = diag(1, 3) # prior covariance matrix of X[0]
> inv.lam_o = solve(lam_o)
> alpha1 = 20 # Prior for \sigma is Gamma (alpha1, beta1)
> alpha2 = 56 # Prior for \rho is Gamma (alpha2, beta2)
> alpha3 = 6 # Prior for \beta is Gamma (alpha3, beta3)
> beta1 = 0.5
> beta2 = 0.5
> beta3 = 0.5
> a4 = 2
> b4 = 6
> 
> K = (tf - to) * Nobs # no of real life observations, i.e. size of Y
> N = (tf - to) / del_t # no of discretizations of the Lorenz-63, i.e. size of X
> burn_in = 5000 / del_t
> R = diag(2, 3) # observational error
> inv_R = solve(R)
> mu = 0
> sigma2 = 10
> n.X = 3 * (N + 1)
> n.theta = 36
> n.sigma = 3
> n.param = n.X + n.theta + n.sigma
> 
> #X_total = euler_maruyama(c(0,0,25), del_t, N + burn_in, c(10, 28, 8 / 3), diag(6, 3)) # generating sample from Lorenz-63
> #X = X_total[, (burn_in):(N + burn_in)]
> load('burninX')
> Y = X[, seq(2, N + 1, N / K)] + t(rmvnorm(K, mean = rep(0, 3), sigma = R)) # observations from Lorenz-63
> init = numeric(n.X + n.theta)
> init[(1:n.X)] <- as.numeric(X) #runif(n.param, 0, 5)
> init[(n.X + 1):(n.X + n.theta)] <- rmvnorm(1,c(rep(0,3), -10, 28, 0, 10, -1, rep(0,3), -8/3, rep(0,11), 1, rep(0,4), -1, rep(0,7)),sigma=diag(0.0001,n.theta))
> #init[(n.X + 1):(n.X + n.theta)] <- c(10, 28, 8 / 3) # random initial values for MCMC
> non_zero = c(4,5,7,8,12,24,29)
> 
> ans = linchpin(1e5, init)
[1] 1000.000    0.228
[1] 2000.0000    0.2415
[1] 3000.00    0.23
[1] 4000.000    0.229
[1] 5000.0000    0.2238
[1] 6000.0000000    0.2248333
[1] 7000.0000000    0.2224286
[1] 8000.000000    0.223625
[1] 9000.0000000    0.2235556
[1] 1.000e+04 2.223e-01
[1] 1.100000e+04 2.237273e-01
[1] 1.200000e+04 2.231667e-01
[1] 1.300000e+04 2.217692e-01
[1] 1.400000e+04 2.207857e-01
[1] 1.500000e+04 2.217333e-01
[1] 1.6000e+04 2.2225e-01
[1] 1.700000e+04 2.228824e-01
[1] 1.800000e+04 2.221111e-01
[1] 1.900000e+04 2.236316e-01
[1] 2.0000e+04 2.2275e-01
[1] 2.100000e+04 2.230476e-01
[1] 2.200000e+04 2.234091e-01
[1] 2.300000e+04 2.227391e-01
[1] 2.400000e+04 2.226667e-01
[1] 2.5000e+04 2.2244e-01
[1] 2.600000e+04 2.225385e-01
[1] 2.700000e+04 2.231111e-01
[1] 2.800000e+04 2.233929e-01
[1] 2.900000e+04 2.228276e-01
[1] 3.000000e+04 2.235667e-01
[1] 3.100000e+04 2.234194e-01
[1] 3.200000e+04 2.237187e-01
[1] 3.300000e+04 2.231515e-01
[1] 3.400000e+04 2.236176e-01
[1] 3.500000e+04 2.243143e-01
[1] 3.600000e+04 2.242778e-01
[1] 3.700000e+04 2.246757e-01
[1] 3.800000e+04 2.254474e-01
[1] 3.900000e+04 2.255641e-01
[1] 4.0000e+04 2.2495e-01
[1] 4.100000e+04 2.248537e-01
[1] 4.200000e+04 2.250238e-01
[1] 4.300000e+04 2.247674e-01
[1] 4.400000e+04 2.242045e-01
[1] 4.500000e+04 2.245111e-01
[1] 4.600000e+04 2.246304e-01
[1] 4.700000e+04 2.244255e-01
[1] 4.800000e+04 2.242083e-01
[1] 4.90000e+04 2.24551e-01
[1] 5.0000e+04 2.2486e-01
[1] 5.100000e+04 2.247843e-01
[1] 5.200000e+04 2.248077e-01
[1] 5.300000e+04 2.246981e-01
[1] 5.400000e+04 2.247593e-01
[1] 5.500000e+04 2.250545e-01
[1] 5.600000e+04 2.252321e-01
[1] 5.700000e+04 2.251053e-01
[1] 5.80e+04 2.25e-01
[1] 5.900000e+04 2.248305e-01
[1] 6.000000e+04 2.249167e-01
[1] 6.100000e+04 2.250164e-01
[1] 6.200000e+04 2.248871e-01
[1] 6.300000e+04 2.251111e-01
[1] 6.400000e+04 2.248281e-01
[1] 6.500000e+04 2.250923e-01
[1] 6.600000e+04 2.249545e-01
[1] 6.700000e+04 2.251493e-01
[1] 6.800000e+04 2.251324e-01
[1] 6.90000e+04 2.24971e-01
[1] 7.000000e+04 2.253286e-01
[1] 7.100000e+04 2.256761e-01
[1] 7.200000e+04 2.261667e-01
[1] 7.30000e+04 2.26411e-01
[1] 7.400000e+04 2.263108e-01
[1] 7.500e+04 2.264e-01
[1] 7.600000e+04 2.266711e-01
[1] 7.700000e+04 2.267662e-01
[1] 7.800000e+04 2.267821e-01
[1] 7.900000e+04 2.267468e-01
[1] 8.000000e+04 2.265875e-01
[1] 8.100000e+04 2.268642e-01
[1] 8.200000e+04 2.269146e-01
[1] 8.300000e+04 2.268916e-01
[1] 8.40000e+04 2.26631e-01
[1] 8.500000e+04 2.266353e-01
[1] 8.600000e+04 2.269651e-01
[1] 8.70000e+04 2.27069e-01
[1] 8.80000e+04 2.26625e-01
[1] 8.900000e+04 2.264045e-01
[1] 9.000000e+04 2.264889e-01
[1] 9.100000e+04 2.266813e-01
[1] 9.200000e+04 2.269239e-01
[1] 9.300000e+04 2.271828e-01
[1] 9.400000e+04 2.275426e-01
[1] 9.500000e+04 2.274842e-01
[1] 9.600000e+04 2.274063e-01
[1] 9.700000e+04 2.274227e-01
[1] 9.800000e+04 2.275408e-01
[1] 9.900000e+04 2.275758e-01
[1] 1.0000e+05 2.2764e-01
[1] 0.22765
> pm = ans[[1]]
> print(matrix(colMeans(pm), nrow=3))
            [,1]        [,2]        [,3]         [,4]         [,5]         [,6]
[1,]  0.03176188 -8.33509952  8.96804154 -0.001649068  0.003905590  0.003794242
[2,]  0.05807420 27.45950536 -0.17686264 -0.014750951 -0.008669397 -0.006602722
[3,] -0.02505635  0.03696255 -0.01726116 -2.629631064  0.045456858 -0.006552483
              [,7]        [,8]         [,9]         [,10]        [,11]
[1,]  0.0008998332 -0.02217623  0.028660094 -4.611869e-02  0.005554746
[2,] -0.0001569799  0.01462629 -0.030222569 -9.802287e-01 -0.010728532
[3,] -0.0023753047  0.96639774  0.003790979 -9.379995e-05  0.065525058
            [,12]    [,13]
[1,] -0.003203032 6.563876
[2,]  0.002178529 6.023904
[3,]  0.002215501 5.955971
> plot.ts(pm[, 1:10])
> plot.ts(pm[, 11:20])
> plot.ts(pm[, 21:30])
> #plot.ts(pm[, 31:39])
> save(ans, file = "l63_linch_reg_bsv_0001_T_20_pv_10")
> 
> #load('l63_linch_reg')
> #pm = ans[[1]]
> #Xlavg = ans[[2]]
> #matrix(colMeans(pm), nrow = 3)
> #save(X, file = 'burninX')
> #load('l63_linch_burnin')
> #params = ans[[1]]
> #load('burninX')
> #Xe = ans[[2]]
> #Xe = matrix(Xe, nrow = 3)
> #sum((Xe - as.vector(X)) ^ 2)
> #pdf("L63_sigma_linchpin_1e4.pdf", height = 6, width = 6)
> #plot(density(params[,1]), ylab = expression(sigma), main = expression(paste('density plot ', sigma)))
> #dev.off()
> 
> #pdf("L63_rho_linchpin_1e4.pdf", height = 6, width = 6)
> #plot(density(params[, 2]), ylab = expression(rho), main = expression(paste('density plot ', rho)))
> #dev.off()
> 
> #pdf("L63_beta_linchpin_1e4.pdf", height = 6, width = 6)
> #plot(density(params[, 3]), ylab = expression(beta), main = expression(paste('density plot ', beta)))
> #dev.off()
> 
> #pdf("L63_Sigma_z_linchpin_1e4.pdf", height = 6, width = 6)
> #plot(density(params[, 6]), ylab = expression(Sigma[z]), main = expression(paste('density plot ', Sigma[z])))
> #dev.off()
> 
> #pdf("L63_TS_linchpin_1e4.pdf", height = 6, width = 6)
> #plot.ts(params, main = 'Time series plots')
> #dev.off()
> 
> #pdf("L63_butterfly_xz_EM_1e4.pdf", height = 6, width = 6)
> #plot(X[1,], X[3,], type = 'l', lwd = 2, xlab = 'X(t)', ylab = 'Z(t)', main = 'Euler-Maruyama')
> #dev.off()
> 
> #pdf("L63_butterfly_xz_linchpin_1e4.pdf", height = 6, width = 6)
> #plot(Xe[1,], Xe[3,], type = 'l', lwd = 2, xlab = 'X(t)', ylab = 'Z(t)', main = 'Linchpin')
> #dev.off()
> 
> #load('l63_linch_reg_bsv')
> #p1 = ans[[1]]
> 
> #1 is
> # 11.4%
> #+ scale = rep(0.001, n.X + n.theta)
> #+ #scale[(n.X + 1):(n.X + n.theta)] = 0.005
>     #+ scale[n.X + non_zero] = 0.01
> #+ scale[n.X + c(24, 29)] = 0.002
> #+ scale[n.X + 8] = 0.005
> #+ scale[n.X + c(5)] = 0.03 # 0.05
> #+ scale[n.X + c(4, 7)] = 0.08
> #+ scale[n.X + 12] = 0.02
> 
> 
> proc.time()
    user   system  elapsed 
5399.450   19.801 5431.451 
